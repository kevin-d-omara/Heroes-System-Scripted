#include <!/TabletopSimulator/TTSTest/TestClass>
#include <!/TabletopSimulator/TTSTest/Assert>
#include <!/HeroesSystemTacticalScale/GameEngine/Config/ForceConfig/Impl/CombatGroup>
#include <!/HeroesSystemTacticalScale/GameEngine/Persistence/Database>

TestClass('CombatGroup unit tests')

function Test:BeforeClass()
    Database.Initialize()
end

function Test:Constructor_JustString()
    local config = 'Pathfinders_Squad_Option'
    local instance = CombatGroup(config)

    local err = AssertEquals(instance.Tile.Path, config); assert(not err, err)
    local err = AssertEquals(#instance.Disclude, 0); assert(not err, err)
    local err = AssertEquals(#instance.Include, 0); assert(not err, err)
    local err = AssertEquals(#instance.Modify, 0); assert(not err, err)
end

function Test:Constructor_ComplexExample()
    local config = {
        'Mechanized',
        disclude = {'Halftrack', 'Halftrack'}
    }
    local instance = CombatGroup(config)

    local err = AssertEquals(#instance.Disclude, 2); assert(not err, err)
end

function Test:GetTransformedIncludes_Tile_NoIncludes()
    local config = 'HoN.Core_Box.Terrain.Position_1'
    local instance = CombatGroup(config)
    local includes = instance:GetTransformedIncludes()

    local err = AssertEquals(0, #includes); assert(not err, err)
end

function Test:GetTransformedIncludes_Tile_NoIncludes_WithInclude()
    local config = {
        tile = 'HoN.Core_Box.Terrain.Position_1',
        include = {'HoN.Core_Box.Tokens.Item_Dynamite'}
    }
    local instance = CombatGroup(config)
    local includes = instance:GetTransformedIncludes()

    local err = AssertEquals(1, #includes); assert(not err, err)
end

function Test:GetTransformedIncludes_Option_NoIncludes()
    local config = 'HoN.Core_Box.US.Field_Command.Bluff_Option'
    local instance = CombatGroup(config)
    local includes = instance:GetTransformedIncludes()

    local err = AssertEquals(0, #includes); assert(not err, err)
end

function Test:GetTransformedIncludes_Option_WithIncludes()
    local config = 'HoN.Core_Box.US.Rifle_Platoon_22nd.Bazooka_Squad_Option'
    local instance = CombatGroup(config)
    local includes = instance:GetTransformedIncludes()

    local prefix = 'HoN.Core_Box.US.Rifle_Platoon_22nd.'
    local expectedList = {'Fire_Team', 'Support_Team', 'Bazooka'}
    for i,v in ipairs(expectedList) do
        local expected = prefix..v
        local actual = includes[i].Path
        local err = AssertEquals(expected, actual); assert(not err, err)
    end
end

function Test:GetTransformedIncludes_ComplexOption()
    local config = {
        tile = 'HoN.Core_Box.US.Rifle_Platoon_22nd.Recruitment_Tile',   -- Includes: {'Officer', 'Fire_Team', 'Support_Team', '_30cal'}
        disclude = {'Officer', 'Support_Team'},
        include = {
            {'Fire_Team', rotation = 90}
        },
        modify = {
            {'Fire_Team', flip = true}
        }
    }
    local instance = CombatGroup(config)
    local includes = instance:GetTransformedIncludes()
    for i,v in ipairs(includes) do
        print(v.Path)
    end

    local prefix = 'HoN.Core_Box.US.Rifle_Platoon_22nd.'
    local err = AssertEquals(3, #includes); assert(not err, err)
    local err = AssertEquals(prefix..'_30cal', includes[2].Path); assert(not err, err)
    local err = AssertEquals(prefix..'Fire_Team', includes[1].Path); assert(not err, err)
    local err = AssertEquals(true, includes[1].Flip); assert(not err, err)
    local err = AssertEquals(prefix..'Fire_Team', includes[3].Path); assert(not err, err)
    local err = AssertEquals(90, includes[3].Rotation); assert(not err, err)
end
