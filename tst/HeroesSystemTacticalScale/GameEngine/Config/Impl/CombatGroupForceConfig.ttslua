#include <!/TabletopSimulator/TTSTest/TestClass>
#include <!/TabletopSimulator/TTSTest/Assert>
#include <!/HeroesSystemTacticalScale/GameEngine/Config/ForceConfig/Impl/CombatGroupForceConfig>

TestClass('CombatGroupForceConfig unit tests')

function Test:Constructor_SimpleArray()
    local config = {
        'Pathfinders_Squad_Option',
        'Engineers_Squad_Option',
        {'Signallers_Option', include = {'Item_Eureka_Ground_Radar'}},
    }
    local expected = config[3].include[1]
    local instance = CombatGroupForceConfig(config)
    local actual = instance.CombatGroups[3].Include[1].Path

    local err = AssertEquals(3, #instance.CombatGroups); assert(not err, err)
    local err = AssertEquals(expected, actual); assert(not err, err)
end

function Test:Constructor_Extra_SingleArray_FirstElementString()
    local config = {
        tiles = {'Pathfinders_Squad_Option'},
        extra = {
            'Item_Halifane_Light',
            'Item_Halifane_Light',
        },
    }
    local expected = config.extra[1]    -- TODO: Change database to DeepCopy result so I don't have to worry about modifying data there.
    local instance = CombatGroupForceConfig(config)
    local actual = instance.Extra[1][1].Path

    local err = AssertEquals(expected, actual); assert(not err, err)
end

function Test:Constructor_Extra_SingleArray_FirstElementTile_ImplicitPath()
    local config = {
        tiles = {'Pathfinders_Squad_Option'},
        extra = {
            {'Item_Halifane_Light', flip = true},
            'Item_Halifane_Light',
        },
    }
    local expected = config.extra[1][1]
    local instance = CombatGroupForceConfig(config)
    local actual = instance.Extra[1][1].Path

    local err = AssertEquals(expected, actual); assert(not err, err)
end

function Test:Constructor_Extra_SingleArray_FirstElementTile_ExplicitPath()
    local config = {
        tiles = {'Pathfinders_Squad_Option'},
        extra = {
            {path = 'Item_Halifane_Light', flip = true},
            'Item_Halifane_Light',
        },
    }
    local expected = config.extra[1].path
    local instance = CombatGroupForceConfig(config)
    local actual = instance.Extra[1][1].Path

    local err = AssertEquals(expected, actual); assert(not err, err)
end

function Test:Constructor_Extra_NestedArray()
    local config = {
        tiles = {'Pathfinders_Squad_Option'},
        extra = {
            {'Item_Halifane_Light', 'Item_Halifane_Light'},
            {'Item_Halifane_Light', 'Item_Halifane_Light'},
        },
    }
    local expected = config.extra[1][1]
    local instance = CombatGroupForceConfig(config)
    local actual = instance.Extra[1][1].Path

    local err = AssertEquals(expected, actual); assert(not err, err)
end

function Test:TransformIntoForceConfigDto_ComplexExample()
    local config = {
        {
            'HoN.Core_Box.US.Rifle_Platoon_22nd.Bazooka_Squad_Option',
            include = {'HoN.Core_Box.Tokens.Item_Files'}
        },
        {
            tile = 'HoN.Core_Box.US.Rifle_Platoon_22nd.Mechanized_Option',
            disclude = {'Halftrack_1'},
            modify = {
                {'Halftrack_2', flip = true}
            }
        },
    }
    local instance = CombatGroupForceConfig(config)
    local dto = instance:TransformIntoForceConfigDto()

    local err = AssertEquals(3, #dto.Tiles); assert(not err, err) -- There are three rows: the header and then the two includes (one for each option).
    local err = AssertEquals(true, dto.Tiles[3][1].Flip); assert(not err, err)  -- Halftrack_2 is flipped and Halftrack_1 is discluded.
end
