#!/bin/sh
#
### Summary
# After a commit is made, ask the developer if they would like to append their commit with the updated Tabletop Simulator object script files.
# These are the scripts that get attached the game objects.
# It is easy to forget to copy them into the repository after making changes within Tabletop Simulator, which is why this post-commit hook exists.
#
### Note
# The script needs to be modified depending on which operating system you are developing on.
# Please update the sections below where the phrase "DEVELOPER" is posted.

POST_COMMIT_FLAG_FILE='.ignore_me_if_you_see_me'

# DEVELOPER: Put in the username for the operating system you are developing on.
USERNAME_WINDOWS="Kevin O'Mara"
USERNAME_MAC=""
USERNAME_LINUX=""

# Directory where Tabletop Simulator holds scripts attached to game objects, by operating system.
TTS_FILE_LOCATION_WINDOWS=/c/Users/$USERNAME_WINDOWS/AppData/Local/Temp/TabletopSimulator/Tabletop\ Simulator\ Lua
TTS_FILE_LOCATION_MAC=""
TTS_FILE_LOCATION_LINUX=""

# DEVELOPER: Pick the location for the operating system you are developing on.
TTS_FILES_LOCATION=$TTS_FILE_LOCATION_WINDOWS

# Directory in this repository where the Tabletop Simulator object scripts are held.
TTS_FILES_GIT='ObjectScripts'

# Summary
#   Prompts the user for yes/no input and returns the result.
#   Continues prompting if the user enters something other than yes or no.
# Arguments
#   $1 (prompt): The phrase to prompt the user with. Will have ' [y|n]?' appended.
# Returns
#   $? (status): 0 if reply was Yes, 1 if reply was No.
function get_yes_no_reply {
    # Allows us to read user input below, assigns stdin to keyboard.
    exec < /dev/tty

    local prompt=$1
    while true; do
        read -p "$prompt [y|n]?" yn
        case $yn in
            [Yy]* ) return 0; break;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes (y|Y) or no (n|N).";;
        esac
    done

    # Close stdin.
    exec <&-
}

# This function will run no matter what happens. Even if the program has an error.
function finish {
    # The commit succeeds even if the post-commit hook fails.
    # So delete this file because the commit will complete no matter what.
    if [ -a $POST_COMMIT_FLAG_FILE ]; then
        rm $POST_COMMIT_FLAG_FILE
    fi
}
trap finish EXIT

if [ -a $POST_COMMIT_FLAG_FILE ]; then
    rm $POST_COMMIT_FLAG_FILE

    prompt='post-commit [INFO]: Do you wish to update the files in '$TTS_FILES_GIT/' to match the files in '$TTS_FILES_LOCATION/''
    get_yes_no_reply "$prompt"
    if [ "$?" -eq 0 ]; then
        echo "post-commit [INFO]: Updating the files in '$TTS_FILES_GIT/' to match the files in '$TTS_FILES_LOCATION/'"
        echo
        rm "$TTS_FILES_GIT"/*
        cp "$TTS_FILES_LOCATION"/* "$TTS_FILES_GIT"/
        git add $TTS_FILES_GIT

        # Amend the commit that just took place.
        # Skip the pre-commit hook to avoid looping infinitely.
        git commit --amend -C HEAD --no-verify
        echo
        echo "post-commit [INFO]: Amended your commit with files:"
        git diff --name-only HEAD^ HEAD "$TTS_FILES_GIT"/
        echo "post-commit [INFO]: See individual changes with 'git diff HEAD^ HEAD $TTS_FILES_GIT'"
        echo
    fi
fi
exit
