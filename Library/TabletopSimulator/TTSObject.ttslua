#include !/TabletopSimulator/Utility/Class
#include !/TabletopSimulator/GetNestedObjectFromGuids

--[[
## Class
public class TTSObject
{
    -- Fields
    public string guid
    public TTSObject parentContainer

    -- Constructors
    public TTSObject:new(guid)
    public TTSObject(guid)

    -- Methods
    public void AddChild(ttsObject, key)
    public void SetParent(parentContainer)
    public Async<void> GetNestedObject(parameters, asCopy)  -- TODO
    public arrary<string> GetParentGuids()
    public array<TTSObject> GetParents()

    public static TTSObject GenerateObjectTree(object)
    public virtual void FoldUp()
}

## Summary
A data class that holds the GUID of a Tabletop Simulator Object and a reference to the container it is inside.
--]]

local TTSObject = {}

-- Make it so that TTSObject() is shorthand for TTSObject:new().
-- This should only be added to the base class, not child classes.
setmetatable(TTSObject, { __call = function(self, ...) return self:new(...) end })

--[[
Return a new TTSObject instance with the specified GUID.
--]]
function TTSObject:new(guid)
    local obj = {}
    setmetatable(obj, self)
    self.__index = self
    self.__call = function(self, ...) return self:new(...) end

    obj.guid = guid

    return obj
end

--[[
## Summary
Add a reference to the child object and set the child's parent reference to this object.

A child is an object that is contained inside of this one (i.e. a tile inside a bag, or a card in a deck).

The child is accessible through the parent by the given key (i.e. parentContainer[key] == childObject).
--]]
function TTSObject:AddChild(ttsObject, key)
    self[key] = ttsObject
    ttsObject.parentContainer = self
end

--[[
## Summary
Assign the parent container of this object.
--]]
function TTSObject:SetParent(parentContainer)
    self.parentContainer = parentContainer
end

--[[

--]]
function TTSObject:GetNestedObject(parameters)
    GetNestedObjectFromGuids(self:GetParentGuids(), parameters)
end

--[[
## Summary
Return the list of guids for the containers that this object is nested inside of.

The first element is the GUID for the Tabletop Simulator Object that would be returned by the global function (https://api.tabletopsimulator.com/base/#getobjectfromguid).

Each subsequent element is the GUID of the Tabletop Simulator Object that would be returned from calling (https://api.tabletopsimulator.com/object/#takeobject) on the Object returned from the previous GUID in the list.

## See also:
* [Tabletop Simulator Object](https://api.tabletopsimulator.com/object/)
--]]
function TTSObject:GetParentGuids()
    return self:GetParents(function(ttsObject) return ttsObject.guid end)
end

--[[
## Summary
Return the list of containers that this object is nested inside of.

The first element is the root level object and the final element is this object.

## Parameters
<function> func: A transformation to apply to each parent object.
    [Optional, by default just returns the ttsObject.]

## Example
To return the GUID of all parent objects, call: myTTSObject:GetParents(function(ttsObject) return ttsObject.guid end)
--]]
function TTSObject:GetParents(func)
    func = func or function(ttsObject) return ttsObject end
    if self.parentContainer == nil then
        return {func(self)}
    else
        local array = self.parentContainer:GetParents(func)
        table.insert(array, func(self))
        return array
    end
end

--[[
Returns a TTSObject.
--]]
function TTSObject.GenerateObjectTree(obj)
    -- The object is a TTSObject or derived class, and a leaf node.
    if Class.IsInstance(obj, TTSObject) then
        return obj

    -- The object is a table, which means this object is a container (bag, deck, etc.).
    elseif type(obj) == 'table' then
        local ttsObject = TTSObject(obj.guid)
        obj.guid = nil
        for k,v in pairs(obj) do
            ttsObject:AddChild(TTSObject.GenerateObjectTree(v), k)
            ttsObject[k]:FoldUp()
        end
        return ttsObject

    -- The object is a string, which means this object is a guid and a leaf node.
    else
        return TTSObject(obj)

    end
end

--[[
## Summary
Copy some* key-value pairs from this object onto its parent.

This method is called when TTSObject.GenerateObjectTree() encounters a TTSObject instance.
--]]
function TTSObject:FoldUp()
    -- *I am a virtual method. You may override me in your custom derived class.
end
