-- Provided for convenience to the user.
#include !/TTSTest/Assert

--[[
## Class
public class TestClass
{
    -- Fields
    public table Test
    public table Ignore

    -- Constructors
    public TestClass:new()
    public TestClass()

    -- Methods
    public void BeforeTest
    public void AfterTest
    public void BeforeClass
    public void AfterClass
}

## Summary
A collection of tests for a single class or functionality.
--]]

local TestClass = {}    -- The class itself.
local Test = {}         -- Singleton to hold test cases.
local Ignore = {}       -- Singleton to hold temporarily ignored tests.

local _AllTests = {}

-- Can instantiate TestClass by calling TestClass().
setmetatable(TestClass, { __call = function(self, ...) return self:new(...) end })

function TestClass:new(name)
    if _AllTests[name] ~= nil then
        error('Cannot create a TestClass with the name: ' .. tostring(name) .. ', because it is already in use.')
    end

    local obj = {}
    setmetatable(obj, self)
    self.__index = self
    self.__call = function(self, ...) return self:new(...) end

    obj.name = name
    Test = obj
    _AllTests[name] = obj

    return obj
end

--[[
Executed before each test.
Use to prepare the test environment (i.e. initialize common variables, etc.).
--]]
function TestClass:BeforeTest()
end

--[[
Executed after each test.
Use to cleanup the test environment (i.e. erase global variables by setting to nil, etc.).
--]]
function TestClass:AfterTest()
end

--[[
Executed once, before the start of all tests.
Use to perform time intensive activities (i.e. instantiating game objects, etc).
--]]
function TestClass:BeforeClass()
end

--[[
Executed once, after all tests have been finished.
Use to clean-up (i.e. delete game objects, etc.)
--]]
function TestClass:AfterClass()
end

--[[
Run all unit tests for all test classes that have been collected in _AllTests .
--]]
function RunAllTests()
    for k,v in pairs(_AllTests) do
        _RunTestsForTestClass(k, v)
    end
end

function _RunTestsForTestClass(name, testClass)
    print('TestClass: ' .. tostring(name))

    -- Save non-test functions.
    local BeforeTest    = testClass.BeforeTest
    local AfterTest     = testClass.AfterTest
    local BeforeClass   = testClass.BeforeClass
    local AfterClass    = testClass.AfterClass

    -- Clear non-test functions.
    testClass.name          = nil
    testClass.BeforeTest    = nil
    testClass.AfterTest     = nil
    testClass.BeforeClass   = nil
    testClass.AfterClass    = nil

    BeforeClass()
    for k,v in pairs(testClass) do
        print('Test: ' .. tostring(k))
        BeforeTest()
        v()
        AfterTest()
    end
    AfterClass()
end
