#include !/HeroesSystemTacticalScale/GameEngine/Model/UnitOfMeasurement
#include !/TabletopSimulator/Vector2
#include !/TabletopSimulator/Vector3

#include !/HeroesSystemTacticalScale/GameEngine/Persistence/Placement

--[[
## Class
class BattlefieldView
{
    -- Fields
    BattlefieldModel Model

    -- Constructors
    BattlefieldView:new(parameters)
    BattlefieldView(parameters)

    -- Methods
    void Materialize()
    Vector2 GetSize()

    void PlaceOnTerrainSpace(path, terrainAlias, index, options)
    void PlaceOnTerrainInterspace(path, terrainAlias, index, options)
    void PlaceOnBattlefieldSpace(path, index, options)
    void PlaceOnBattlefieldInterspace(path, index, options) options)
    void PlaceOnBattlefield(path, worldPosition, options)

    Vector2 GetWorldPositionForTerrainSpace(terrainAlias, index)
    Vector2 GetWorldPositionForTerrainInterspace(terrainAlias, index)
    Vector2 GetWorldPositionForBattlefieldSpace(index)
    Vector2 GetWorldPositionForBattlefieldInterspace(index)
}

## Summary
Physical representation of the Battlefield. Offers methods for placing tiles on the Battlefield.
--]]

local BattlefieldView = {}

-- Can create a new BattlefieldView instance by calling either BattlefieldView:new() or just BattlefieldView().
setmetatable(BattlefieldView, { __call = function(self, ...) return self:new(...) end })

--[[
## Parameters
<BattlefieldModel> model: All data needed to physically manifest the BattlefieldView.
--]]
function BattlefieldView:new(model)
    local obj = {}
    setmetatable(obj, self)
    self.__index = self
    self.__call = function(self, ...) return self:new(...) end

    obj.Model = model

    return obj
end

--[[
## Summary
Place all the Terrain Boards and Terrain Tiles and Objects onto the table.
Pieces are centered around the center of the table.

## Parameters
<table> parameters:
    <func> callback: A function to invoke when the Battlefield is finshed being physically materialized.
        [Optional, defaults to nil.]
--]]
function BattlefieldView:Materialize(parameters)
    local parameters = parameters or {}

    -- Lay Terrain Boards.
    for k,board in pairs(self.Model.TerrainBoards) do
        local path      = board[1]
        local index     = board[2].index
        local options   = board[2]
        options.lock = true
        self:PlaceOnBattlefieldSpace(path, index, options)
    end

    -- Lay Terrain Tiles.
    for k,tile in pairs(self.Model.TerrainTiles) do
        local path      = tile[1]
        local alias     = tile[2]
        local index     = tile[3]
        local indexType = tile[4]
        local options   = tile[5]
        options.lock = true

        if indexType == "space" then
            self:PlaceOnTerrainSpace(path, alias, index, options)
        elseif indexType == "interspace" then
            self:PlaceOnTerrainInterspace(path, alias, index, options)
        else
            error("Improper value for indexType: 'space' or 'interspace' expected, but got " .. tostring(indexType))
        end
    end

    -- Lay Objects
    for k,object in pairs(self.Model.Objects) do
        local path      = object[1]
        local alias     = object[2]
        local index     = object[3]
        local indexType = object[4]
        local options   = object[5]

        if indexType == "space" then
            self:PlaceOnTerrainSpace(path, alias, index, options)
        elseif indexType == "interspace" then
            self:PlaceOnTerrainInterspace(path, alias, index, options)
        else
            error("Improper value for indexType: 'space' or 'interspace' expected, but got " .. tostring(indexType))
        end
    end

    if parameters.callback ~= nil then parameters.callback() end
end

--[[
## Summary
Return the size of the battlefield measured in Unity units.
--]]
function BattlefieldView:GetSize()
    return Vector2({
        x = self.Model.Width * UnitOfMeasurement.Cell,
        y = self.Model.Height * UnitOfMeasurement.Cell,
    })
end

function BattlefieldView:PlaceOnTerrainSpace(path, terrainAlias, index, options)
    options.position = self:GetWorldPositionForTerrainSpace(terrainAlias, index)
    Placement.PlaceObjectAbove(path, options)
end

function BattlefieldView:PlaceOnTerrainInterspace(path, terrainAlias, index, options)
    options.position = self:GetWorldPositionForTerrainInterspace(terrainAlias, index)
    Placement.PlaceObjectAbove(path, options)
end

function BattlefieldView:PlaceOnBattlefieldSpace(path, index, options)
    options.position = self:GetWorldPositionForBattlefieldSpace(index)
    Placement.PlaceObjectAbove(path, options)
end

function BattlefieldView:PlaceOnBattlefieldInterspace(path, index, options)
    options.position = self:GetWorldPositionForBattlefieldInterspace(index)
    Placement.PlaceObjectAbove(path, options)
end

--[[
Return the World Coordinates (x,y,z) for the Terrain Coordinates (x,y).

The Terrain Coordinates are measured in spaces and start from (1,1) which is the bottom left space of the battlefield.
The World Coordinate's y component (height) is always 0.
--]]
function BattlefieldView:GetWorldPositionForBattlefieldSpace(cell)
    local cell = Vector3(cell)
    local originBattlefieldWorld = Vector3.zero
    local originBattlefieldCell  = Vector3((self.Model.Width + 1)/2, (self.Model.Height + 1)/2, 0)

    local worldPositionCell =
        (originBattlefieldCell - cell) * UnitOfMeasurement.Cell + originBattlefieldWorld

    return Vector3(
        -- Rotate from local coordinate system to world coordinate system.
        worldPositionCell.x,   -- world x-axis = local x-axis
        worldPositionCell.z,   -- world y-axis = local z-axis
        worldPositionCell.y    -- world z-axis = local y-axis
    )
end

function BattlefieldView:GetWorldPositionForBattlefieldInterspace(index)
    return self:GetWorldPositionForBattlefieldSpace(index)
end

function BattlefieldView:GetWorldPositionForTerrainSpace(terrainAlias, index)
    return self:GetWorldPositionForBattlefieldSpace(self.Model:ConvertTerrainSpaceToBattlefieldSpace(terrainAlias, index))
end

function BattlefieldView:GetWorldPositionForTerrainInterspace(terrainAlias, index)
    return self:GetWorldPositionForBattlefieldInterspace(self.Model:ConvertTerrainInterspaceToBattlefieldInterspace(terrainAlias, index))
end
