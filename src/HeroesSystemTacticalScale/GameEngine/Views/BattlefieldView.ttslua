#include <!/../lib/30log/class>
#include <!/HeroesSystemTacticalScale/GameEngine/Model/UnitOfMeasurement>
#include <!/TabletopSimulator/Vector2>
#include <!/TabletopSimulator/Vector3>

#include <!/HeroesSystemTacticalScale/GameEngine/Placement>

--[[
## Class
class BattlefieldView
{
    -- Fields
    BattlefieldConfig Config

    -- Constructors
    BattlefieldView(parameters)

    -- Methods
    void Materialize()
    Vector2 GetSize()

    void PlaceOnTerrain(tile)
    void PlaceOnTerrainSpace(tile, index, terrainBoardAlias)
    void PlaceOnTerrainInterspace(tile, index, terrainBoardAlias)
    void PlaceOnBattlefieldSpace(tile, index)
    void PlaceOnBattlefieldInterspace(tile, index)
    void PlaceOnBattlefield(path, worldPosition, options)

    Vector2 GetWorldPositionForTerrainSpace(terrainAlias, index)
    Vector2 GetWorldPositionForTerrainInterspace(terrainAlias, index)
    Vector2 GetWorldPositionForBattlefieldSpace(index)
    Vector2 GetWorldPositionForBattlefieldInterspace(index)
}

## Summary
Physical representation of the Battlefield. Offers methods for placing tiles on the Battlefield.
--]]

BattlefieldView = class('BattlefieldView')

--[[
## Parameters
<BattlefieldConfig> config: All data needed to physically manifest the BattlefieldView.
--]]
function BattlefieldView:init(config)
    self.Config = config

    return self
end

--[[
## Summary
Place all the Terrain Boards and Terrain Tiles and Objects onto the table.
Pieces are centered around the center of the table.

## Parameters
<func> callback: A function to invoke when the Battlefield is finshed being physically materialized.
    [Optional, defaults to nil.]
--]]
function BattlefieldView:Materialize(callback)
    -- Lay Terrain Boards.
    for k,board in pairs(self.Config.TerrainBoards) do
        self:PlaceOnBattlefieldSpace(board, board.Index)
    end

    -- Lay Terrain Tiles.
    for k,tile in pairs(self.Config.TerrainTiles) do
        self:PlaceOnTerrain(tile)
    end

    -- Lay Objects
    for k,tile in pairs(self.Config.Objects) do
        self:PlaceOnTerrain(tile)
    end

    if callback ~= nil then callback() end
end

--[[
## Summary
Return the size of the battlefield measured in Unity units.
--]]
function BattlefieldView:GetSize()
    return Vector2({
        x = self.Config.Width * UnitOfMeasurement.Cell,
        y = self.Config.Height * UnitOfMeasurement.Cell,
    })
end

--[[
## Parameters
<TerrainElement> tile
--]]
function BattlefieldView:PlaceOnTerrain(tile)
    if tile.IndexType == "space" then
        self:PlaceOnTerrainSpace(tile, tile.Index, tile.TerrainBoardAlias)
    elseif tile.IndexType == "interspace" then
        self:PlaceOnTerrainInterspace(tile, tile.Index, tile.TerrainBoardAlias)
    else
        error("Improper value for tile.indexType: the string 'space' or 'interspace' expected, but got " .. tostring(tile.IndexType))
    end
end

function BattlefieldView:PlaceOnTerrainSpace(tile, index, terrainBoardAlias)
    local position = self:GetWorldPositionForTerrainSpace(terrainBoardAlias, index)
    Placement.PlaceTileOntoTable(tile, position)
end

function BattlefieldView:PlaceOnTerrainInterspace(tile, index, terrainBoardAlias)
    local position = self:GetWorldPositionForTerrainInterspace(terrainBoardAlias, index)
    Placement.PlaceTileOntoTable(tile, position)
end

function BattlefieldView:PlaceOnBattlefieldSpace(tile, index)
    local position = self:GetWorldPositionForBattlefieldSpace(index)
    Placement.PlaceTileOntoTable(tile, position)
end

function BattlefieldView:PlaceOnBattlefieldInterspace(tile, index)
    local position = self:GetWorldPositionForBattlefieldInterspace(index)
    Placement.PlaceTileOntoTable(tile, position)
end

--[[
Return the World Coordinates (x,y,z) for the Terrain Coordinates (x,y).

The Terrain Coordinates are measured in spaces and start from (1,1) which is the bottom left space of the battlefield.
The World Coordinate's y component (height) is always 0.
--]]
function BattlefieldView:GetWorldPositionForBattlefieldSpace(cell)
    local cell = Vector3(cell)
    local originBattlefieldWorld = Vector3.zero
    local originBattlefieldCell  = Vector3((self.Config.Width + 1)/2, (self.Config.Height + 1)/2, 0)

    local worldPositionCell =
        (originBattlefieldCell - cell) * UnitOfMeasurement.Cell + originBattlefieldWorld

    return Vector3(
        -- Rotate from local coordinate system to world coordinate system.
        worldPositionCell.x,   -- world x-axis = local x-axis
        worldPositionCell.z,   -- world y-axis = local z-axis
        worldPositionCell.y    -- world z-axis = local y-axis
    )
end

function BattlefieldView:GetWorldPositionForBattlefieldInterspace(index)
    return self:GetWorldPositionForBattlefieldSpace(index)
end

function BattlefieldView:GetWorldPositionForTerrainSpace(terrainAlias, index)
    return self:GetWorldPositionForBattlefieldSpace(self.Config:ConvertTerrainSpaceToBattlefieldSpace(terrainAlias, index))
end

function BattlefieldView:GetWorldPositionForTerrainInterspace(terrainAlias, index)
    return self:GetWorldPositionForBattlefieldInterspace(self.Config:ConvertTerrainInterspaceToBattlefieldInterspace(terrainAlias, index))
end
