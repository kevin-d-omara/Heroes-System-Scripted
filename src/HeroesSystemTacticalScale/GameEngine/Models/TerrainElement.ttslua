#include Tile

--[[
## Class
public class TerrainElement
{
    -- Public Fields
    string Path                 -- The path to this resource (i.e. "HoN.Core_Box.Terrain.Thicket_1")
    bool Flip = false           -- True if the object will be flipped over when placed.
    bool Lock = false           -- True if the object will be locked/frozen when placed.
    float Rotation = 0          -- Number of degrees about the y-axis (clockwise) the object will be rotated when placed.

    Vector2 Index               -- Coordinates on the TerrainBoard where the object will be placed.
    string IndexType            -- Either "space" or "interspace". The coordinate system for Index.
    string TerrainBoardAlias    -- Alias for the TerrainBoard that this object will be placed on.

    -- Constructors
    public Tile(table data)
}

## Summary
Data object that describes how to place an object on the Battlefield.
--]]

local TerrainElement = Tile('')    -- Must pass a string to the constructor, otherwise it will call error().
TerrainElement.Path = nil          -- Get rid of the path. There shouldn't be a default/fallback path.

--[[
## Parameters
<array> data: An array with the following elements:
    <string> [1] (Path)
    <string> [2] (TerrainBoardAlias)
    <Vector2> [3] (Index)
    <string> [4] (IndexType)
    <table> [5]:
        [Optional, defaults to the below defaults.]
        <bool> flip = false
        <bool> lock = false
        <float> rotation = 0
--]]
function TerrainElement:new(data)
    if type(data)    ~= 'table'  then error("Argument [1] data: table expected, but got: " .. tostring(type(data)) .. ".")           end
    if type(data[1]) ~= 'string' then error("Argument [1][1] data[1]: string expected, but got: " .. tostring(type(data[1])) .. ".") end
    if type(data[2]) ~= 'string' then error("Argument [1][2] data[2]: string expected, but got: " .. tostring(type(data[2])) .. ".") end
    if type(data[3]) ~= 'table'  then error("Argument [1][3] data[3]: table expected, but got: "  .. tostring(type(data[3])) .. ".") end
    if type(data[4]) ~= 'string' then error("Argument [1][4] data[4]: string expected, but got: " .. tostring(type(data[4])) .. ".") end

    local obj = {}
    setmetatable(obj, self)
    self.__index = self
    self.__call = function(self, ...) return self:new(...) end

    obj.Path                = data[1]
    obj.TerrainBoardAlias   = data[2]
    obj.Index               = Vector2(data[3])
    obj.IndexType           = data[4]

    local options = data[5] or {}
    obj.Flip = options.flip or false
    obj.Lock = options.lock or false
    obj.Rotation = options.rotation or 0

    return obj
end
