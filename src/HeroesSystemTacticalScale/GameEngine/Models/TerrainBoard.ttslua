#include Tile
#include !/TabletopSimulator/Vector2
#include !/Lua/String/SplitString

--[[
## Class
public class TerrainBoard
{
    -- Public Fields
    string Path                     -- The path to this resource (i.e. "HoN.Core_Box.Terrain.Thicket_1")
    bool Flip = false               -- True if the object will be flipped over when placed.
    bool Lock = false               -- True if the object will be locked/frozen when placed.
    float Rotation = 0              -- Number of degrees about the y-axis (clockwise) the object will be rotated when placed.

    Vector2 Index                   -- The (x,y) Terrain Coordinates (in spaces) of this board.
    string Alias = ?*               -- The name/key to use when placing TerrainElements onto this object (*see constructor).
    Vector2 Bounds = Vector2(7,7)   -- The width and height (in spaces) of this board after it has been rotated (i.e. a 2x3 board that is rotated 90 degrees would have bounds of 3x2).

    -- Constructors
    public Tile(table data)
}

## Summary
Data object that describes how to place a Terrain Board onto the Battlefield.
--]]

local TerrainBoard = Tile('')    -- Must pass a string to the constructor, otherwise it will call error().
TerrainBoard.Path = nil          -- Get rid of the path. There shouldn't be a default/fallback path.

--[[
## Parameters
<string> path
<Vector2> index
<table> options:
    [Optional, defaults to the below defaults.]
    <bool> flip = false
    <bool> lock = false
    <float> rotation = 0
    <Vector2> bounds = Vector2(7,7)
    <string> alias
        [Optional, defaults to the leaf key in the path (i.e. "C6_A" for "HoN.Core_Box.Terrain.C6_A").]
--]]
function TerrainBoard:new(path, index, options)
    if type(path)  ~= 'string' then error("Argument [1] path: string expected, but got: " .. tostring(type(path))  .. ".") end
    if type(index) ~= 'table'  then error("Argument [2] index: table expected, but got: " .. tostring(type(index)) .. ".") end

    local obj = {}
    setmetatable(obj, self)
    self.__index = self
    self.__call = function(self, ...) return self:new(...) end

    obj.Path  = path
    obj.Index = Vector2(index)

    options = options or {}
    obj.Flip = options.flip or false
    obj.Lock = options.lock or false
    obj.Rotation = options.rotation or 0
    if options.bounds == nil then
        obj.Bounds = Vector2(7,7)
    else
        obj.Bounds = Vector2(options.bounds)
    end
    if options.alias == nil then
        local array = SplitString(obj.Path, '.')
        local key = array[#array]   -- The leaf key in the path (i.e. 'C6_A' for 'HoN.Core_Box.Terrain.C6_A').
        obj.Alias = key
    else
        obj.Alias = options.alias
    end

    return obj
end
