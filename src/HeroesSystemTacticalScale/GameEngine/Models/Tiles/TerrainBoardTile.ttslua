#include <!/../lib/30log/class>
#include <Tile>
#include <!/TabletopSimulator/Vector2>
#include <!/Lua/String/SplitString>

--[[
## Class
public class TerrainBoardTile : Tile
{
    -- Public Fields
    string Path                     -- The path to this resource (i.e. "HoN.Core_Box.Terrain.Thicket_1")
    bool Flip = false               -- True if the object will be flipped over when placed.
    bool Lock = false               -- True if the object will be locked/frozen when placed.
    float Rotation = 0              -- Number of degrees about the y-axis (clockwise) the object will be rotated when placed.

    Vector2 Index                   -- The (x,y) Terrain Coordinates (in spaces) of this board.
    string Alias = ?*               -- The name/key to use when placing TerrainElements onto this object (*see constructor).
    Vector2 Bounds = Vector2(7,7)   -- The width and height (in spaces) of this board after it has been rotated (i.e. a 2x3 board that is rotated 90 degrees would have bounds of 3x2).

    -- Constructors
    public Tile(table data)
}

## Summary
Extension of Tile that defines how to place an Object onto the Battlefield as a TerrainBoard (i.e. what coordinates, etc).

For example could be "C6_A", "SH1_B", etc.
--]]

TerrainBoardTile = Tile:extend("TerrainBoardTile")

--[[
## Parameters
<string> path
<Vector2> index
<table> options:
    [Optional, defaults to the below defaults.]
    <bool> flip = false
    <bool> lock = false
    <float> rotation = 0
    <Vector2> bounds = Vector2(7,7)
    <string> alias
        [Optional, defaults to the leaf key in the path (i.e. "C6_A" for "HoN.Core_Box.Terrain.C6_A").]
--]]
function TerrainBoardTile:init(path, index, options)
    if type(path)  ~= 'string' then error("Argument [1] path: string expected, but got: " .. tostring(type(path))  .. ".") end
    if type(index) ~= 'table'  then error("Argument [2] index: table expected, but got: " .. tostring(type(index)) .. ".") end

    -- Pass the options and path to the parent constructor.
    tile = options or {}
    tile.path = path
    TerrainBoardTile.super.init(self, tile)

    -- Extra parameters
    self.Index = Vector2(index)
    if options.bounds == nil then
        self.Bounds = Vector2(7,7)
    else
        self.Bounds = Vector2(options.bounds)
    end
    if options.alias == nil then
        local array = SplitString(self.Path, '.')
        local key = array[#array]   -- The leaf key in the path (i.e. 'C6_A' for 'HoN.Core_Box.Terrain.C6_A').
        self.Alias = key
    else
        self.Alias = options.alias
    end
end
