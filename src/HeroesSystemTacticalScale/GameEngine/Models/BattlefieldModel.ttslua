#include <Tiles/TerrainBoardTile>
#include <Tiles/TerrainElementTile>
#include <!/TabletopSimulator/Vector2>

--[[
## Class
class BattlefieldModel
{
    -- Fields
    int Width
    int Height
    array<TerrainBoardTile> TerrainBoards
    array<TerrainElementTile> TerrainTiles
    array<TerrainElementTile> Objects

    -- Constructors
    BattlefieldModel:new(parameters)
    BattlefieldModel(parameters)

    -- Methods
    Vector2 ConvertTerrainSpaceToBattlefieldSpace(terrainAlias, index)
    Vector2 ConvertTerrainInterspaceToBattlefieldInterspace(terrainAlias, index)
}

## Summary
The battlefield is made up of Terrain Boards and Terrain Tiles that are assmebled to create a wide vareity of theatres of operations.

Terrain Boards are large tiles (usually 7x7 spaces) that are the first pieces to be placed on the table.
Terrain Tiles are smaller pieces that are set on top of the Terrain Boards (for example: a pond or a house).

## Coordinate Systems
There are two coordinate systems used to describe the location of Terrain and Elements.
In all cases, origin is at the bottom left with +x to the right and +y to the top (Cartesian Coordinates).

Terrain Coordinates:
    Measured by either "tile" or "space":
    tile: (1,1) is the bottom-left terrain tile of the battlefield. Each unit is an entire terrain tile (7x7 spaces).
    space: (1,1) is the bottom-left space of the bottom-left terrain tile of the battlefield. Each unit is a single space.

Element Coordinates:
    Measured by either "space" or "interspace":
    space: (1,1) is the bottom-left space of the terrain tile. Each unit is a single space.
    interspace: (0,0) is the bottom-left interspace of the terrain tile (physically on the corner of the tile). Each unit is a single interspace.

## Notes
Internally, all Terrain Coordinates are measured by "spaces".
--]]

BattlefieldModel = {}

-- Can create a new BattlefieldModel instance by calling either BattlefieldModel:new() or just BattlefieldModel().
setmetatable(BattlefieldModel, { __call = function(self, ...) return self:new(...) end })

--[[
## Notes
There are two different constructors for the BattlefieldModel model:
    1. The most commonly used. Assumes all TerrainBoards are the large 7x7 tiles. The 'index' and 'bounds' key of each TerrainBoardTile should not be specified.
    2. Only used for special scenarios where the TerrainBoards may be of any size or shape (ex: caves from Shadow Hunters SoN expansion) or when there is a secondary battlefield (ex: sewers from HoS or underground area from Radar Station & Factory).

## Signatures
BattlefieldModel(data)
    data:
        <int> Height: The number of large (7x7) boards tall the battlefield is.
        <int> Width: The number of large (7x7) boards wide the battlefield is.
        <table> TerrainBoards:          -- Array of <TerrainBoardTile> objects which are the first set of tiles to be placed on the board (ex: the large 7x7 tiles or the smaller cave or sewer pieces from the expansions).
            <string> [1] (path)
            <table> [2] (options):
                [Optional, defaults to the following defaults.]
                flip                    -- True if the object will be flipped over when placed.
                    [Optional, defaults to false.]
                rotation                -- Number of degrees about the y-axis (clockwise) the object will be rotated when placed.
                    [Optional, defaults to no rotation (0 degrees).]
                alias                   -- The name/key to specify to place objects on this tile.
                    [Optional, defaults to the leaf key in the path (i.e. "C6_A" for "HoN.Core_Box.Terrain.C6_A").]
        <table> TerrainTiles            -- Array of <TerrainElementTile> objects which are placed on top of the Terrain Boards (ex: houses, defensive positions, barbed wire, etc.).
            [Optional, defaults to having no TerrainElements.]
        <table> Objects                 -- Array of <TerrainElementTile> objects which are placed on top of the Terrain Tiles and Terrain Boards (ex: units, objectives, etc.).
            [Optional, defaults to having no Objects.]

BattlefieldModel(data)
    Same as above, except TerrainBoards[2] (options) has two additional keys:
        index: The (x,y) Terrain Coordinates (in spaces) of the center of this board.
        bounds: The width and height (in spaces) of this board after it has been rotated (i.e. a 2x3 board that is rotated 90 degrees would have bounds of 3x2).
    Furthermore, Height and Width measure the number of spaces, not boards (there are 7x7 spaces per standard large terrain board).
--]]
function BattlefieldModel:new(parameters)
    -- Validate input.
    if type(parameters) ~= 'table'                  then return error("Argument [1] parameters: table expected, but got " .. tostring(type(parameters)) .. ".") end
    if type(parameters.Width) ~= 'number'           then return error("Argument [1] parameters.Width: integer number expected, but got " .. tostring(type(parameters.Width)) .. ".") end
    if type(parameters.Height) ~= 'number'          then return error("Argument [1] parameters.Height: integer number expected, but got " .. tostring(type(parameters.Height)) .. ".") end
    if type(parameters.TerrainBoards) ~= 'table'    then return error("Argument [1] parameters.TerrainBoards: table expected, but got " .. tostring(type(parameters.TerrainBoards)) .. ".") end
    if #parameters.TerrainBoards < 1                then return error("Argument [1] parameters.TerrainBoards: array expected, but 0 elements found.") end

    local obj = {}
    setmetatable(obj, self)
    self.__index = self
    self.__call = function(self, ...) return self:new(...) end

    -- Default values.
    parameters = BattlefieldModel._TryUseSignatureOne(parameters)
    parameters.TerrainTiles = parameters.TerrainTiles or {}
    parameters.Objects = parameters.Objects or {}

    obj.Width           = parameters.Width
    obj.Height          = parameters.Height
    obj.TerrainBoards = {}
    for i,v in ipairs(parameters.TerrainBoards) do
        obj.TerrainBoards[i] = TerrainBoardTile(v[1], v[2].index, v[2])
        obj.TerrainBoards[i].Lock = true
    end
    obj.TerrainTiles = {}
    for i,v in ipairs(parameters.TerrainTiles) do
        obj.TerrainTiles[i] = TerrainElementTile(v)
        obj.TerrainTiles[i].Lock = true
    end
    obj.Objects = {}
    for i,v in ipairs(parameters.Objects) do
        obj.Objects[i] = TerrainElementTile(v)
    end
    obj._AliasToTerrainBoardMap = {}
    for i,v in ipairs(obj.TerrainBoards) do
        obj._AliasToTerrainBoardMap[v.Alias] = v
    end

    return obj
end

function BattlefieldModel:ConvertTerrainSpaceToBattlefieldSpace(terrainAlias, index)
    local board = self:_GetTerrainBoardForAlias(terrainAlias)
    local bounds = board.Bounds

    local centerBoardBattlefield = board.Index                                      -- The (x,y) Terrain Coordinates of the center of this board on the battlefield.
    local centerBoardTerrain = Vector2((bounds.x + 1)/2, (bounds.y + 1)/2)          -- The (x,y) Element Coordinates of the center of this board within the board itself.
    local indexBattlefield = index - centerBoardTerrain + centerBoardBattlefield    -- The (x,y) Terrain Coordinates of the index on the battlefield.

    return indexBattlefield
end

function BattlefieldModel:ConvertTerrainInterspaceToBattlefieldInterspace(terrainAlias, index)
    return self:ConvertTerrainSpaceToBattlefieldSpace(terrainAlias, Vector2(index) + {0.5, 0.5})
end

function BattlefieldModel:_GetTerrainBoardForAlias(terrainAlias)
    local board = self._AliasToTerrainBoardMap[terrainAlias]
    if board == nil then
        error("Terrain alias not found: '" .. tostring(terrainAlias) .. "'. Check your spelling and make sure this Terrain Board is actually being used.")
    end

    return board
end


--------------------------------------------------------------------------------
-- [[ Methods for constructor signature 1 ]] -----------------------------------
--------------------------------------------------------------------------------

--[[
## Summary
Check if the first constructor signature is being used, and if so apply it.
--]]
function BattlefieldModel._TryUseSignatureOne(parameters)
    -- If any terrain board is missing the key named 'index' from its options, then the first constructor signature is used.
    local isSignatureOne = false
    for i,v in ipairs(parameters.TerrainBoards) do
        local options = v[2]
        if options == nil or options.index == nil then
            isSignatureOne = true
            break
        end
    end

    if isSignatureOne then
        local numBoardsActual   = #parameters.TerrainBoards
        local numBoardsExpected = parameters.Width * parameters.Height
        if numBoardsActual ~= numBoardsExpected then
            local adjective = numBoardsActual < numBoardsExpected and 'few' or 'many'
            error("There are too " .. adjective .. " Terrain Boards for the specified Width and Height: " .. tostring(parameters.Width) .. " by " .. tostring(parameters.Height) .. ".")
        end

        BattlefieldModel._Signature1_AddIndexToTerrainBoards(parameters.TerrainBoards, parameters.Width, parameters.Height)

        -- Convert width/height from 'number of terrain boards' (which are 7x7 spaces each) to 'number of spaces'.
        parameters.Width  = parameters.Width  * 7
        parameters.Height = parameters.Height * 7
    end

    return parameters
end

--[[
## Summary
Populate each Terrain Board's 'index' with the coordinates of it's center space relative to the entire battlefield.

The boards are mapped onto a grid of size 'width' x 'height'.
The boards are mapped starting from the top left and then moving left-to-right, top-to-bottom.

## Example
For a 2 by 2 battlefield that looks like:
A|B
C|D
{
    {"HoN.Core_Box.Terrain.A"},
    {"HoN.Core_Box.Terrain.B", {rotation = 90}},
    {"HoN.Core_Box.Terrain.C"},
    {"HoN.Core_Box.Terrain.D"},
}
becomes
{
    {"HoN.Core_Box.Terrain.A". {index = { 4,11}               }},   -- Board (1,2) has the index ( 4,11) for its center space.
    {"HoN.Core_Box.Terrain.B", {index = {11,11}, rotation = 90}},   -- Board (2,2) has the index (11,11) for its center space.
    {"HoN.Core_Box.Terrain.C". {index = { 4, 4}               }},   -- Board (1,1) has the index ( 4, 4) for its center space.
    {"HoN.Core_Box.Terrain.D", {index = {11, 4}               }},   -- Board (2,1) has the index (11 ,4) for its center space.
}
--]]
function BattlefieldModel._Signature1_AddIndexToTerrainBoards(terrainBoards, width, height)
    local i = 0
    for y = height, 1, -1 do    -- Height is measured in terrain boards.
        for x = 1, width do     -- Width  is measured in terrain boards.
            i = i + 1
            local board = terrainBoards[i]

            if type(board[2]) ~= "table" then
                -- Add empty "options" to this element if it doesn't already have any options.
                board[2] = {}
            end

            -- The index is the space at the center of the terrain board, which is (4,4) for a 7x7 tile.
            local coordX = 4 + 7*(x-1)
            local coordY = 4 + 7*(y-1)
            board[2].index = {coordX, coordY}
        end
    end
end
