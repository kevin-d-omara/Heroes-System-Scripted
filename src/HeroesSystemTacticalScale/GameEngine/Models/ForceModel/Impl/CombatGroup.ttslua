#include !/../lib/30log/class
#include MakeFullyQualified
#include !/HeroesSystemTacticalScale/GameEngine/Models/Tiles/Tile
#include !/HeroesSystemTacticalScale/GameEngine/Persistence/Database
#include !/Lua/Table/SubtractList

--[[
## Class
class CombatGroup : Tile
{
    -- Public Fields
    Tile Tile                       -- A Tile which comes bundled with other Tiles (ex: "Ambush_Squad_Option").
    array<string> Disclude  = nil   -- Tiles to disclude from the "Includes" of this Tile (ex: disclude 'Recon_Team' from 'Ambush_Squad_Option').
    array<Tile> Include     = nil   -- Tiles to add to the "Includes" of this Tile (ex: 'Recon_Team' or 'HoN.Core_Box.Terrain.Position_1x1').
    array<Tile> Modify      = nil   -- Parameters to alter how the "Includes" of this Tile are placed (ex: flipped, rotated, etc.)

    -- Public Constructors
    CombatGroup(data)
}

## Summary
Wrapper for Tile that defines how to modify the extra Tiles that come included with this one.

For example could be "Pathfinders_Signallers_Option" with an extra "Item_Transmitter" or "Halftracks_x2" discluding one of the Halftracks.
--]]

CombatGroup = class("CombatGroup")

--[[
## Constructors
CombatGroup(string path)
CombatGroup(table data)
    data:
        <Tile> 1|tile       -- The key can be either [1] or ['tile'].
        array<string> disclude  = nil
        array<Tile> include     = nil
        array<Tile> modify      = nil

## Examples
-- Each of the three elements below is a valid input to CombatGroup().
options = {
    [1] = 'Ambush_Squad',
    [2] = {
        'Halftracks_x2',
        exclude = {'Halftrack', 'Halftrack'},
    },
    [4] = {
        {'Halftracks_x2', flip = true},
        exclude = {'Halftrack', 'Halftrack'},
    },
}
--]]
function CombatGroup:init(data)
    if type(data) == 'string' then
        data = {data}
    end
    data.tile = data[1] or data.tile
    data.disclude   = data.disclude or {}
    data.include    = data.include or {}
    data.modify     = data.modify or {}

    assert(data.disclude == nil or type(data.disclude) == 'table', "Argument [1] 'data.disclude': table expected but got " .. tostring(type(data.disclude)) .. ".")
    assert(data.include == nil or type(data.include) == 'table', "Argument [1] 'data.include': table expected but got " .. tostring(type(data.include)) .. ".")
    assert(data.modify == nil or type(data.modify) == 'table', "Argument [1] 'data.modify': table expected but got " .. tostring(type(data.modify)) .. ".")
    if not (data.include.flip == nil and data.include.lock == nil and data.include.rotation == nil) then
        local path = data.include[1] or data.include.path
        error("Argument [1] 'data.include': array of 'Tile' expected but got just a single 'Tile' with path '" .. path .. "'. It needs to be wrapped in a table '{ }'.")
    end
    if not (data.modify.flip == nil and data.modify.lock == nil and data.modify.rotation == nil) then
        local path = data.modify[1] or data.modify.path
        error("Argument [1] 'data.modify': array of 'Tile' expected but got just a single 'Tile' with path '" .. path .. "'. It needs to be wrapped in a table '{ }'.")
    end

    self.Tile = Tile(data.tile)
    self.Disclude = {}
    for i,v in ipairs(data.disclude) do
        self.Disclude[i] = v
    end
    self.Include = {}
    for i,v in ipairs(data.include) do
        self.Include[i] = Tile(v)
    end
    self.Modify = {}
    for i,v in ipairs(data.modify) do
        self.Modify[i] = Tile(v)
    end
end

--[[
## Summary
Transform this CombatGroup into an arrary<Tile> by applying self.Disclude, self.Include, and self.Modify.

## Pseudocode
Check the database to see what the Includes are for this Tile (ex: Rifle_Platoon_22nd comes with {'Officer', 'Fire_Team', 'Support_Team', '_30cal'}).
Then, remove elements from this list by filtering out elements in self.Disclude.
Then, transform each element into a Tile class or replace it with the corresponding element in self.Modify.
Then, add extra elements usign self.Include.
--]]
function CombatGroup:GetTransformedIncludes()
    local tiles = {}

    local data = Database.GetData(self.Tile.Path)   -- Returns a GameElements/RecruitmentTile or GameElements/Option.
    local includes = data.Includes or {}
    local filteredIncludes = SubtractList(includes, self.Disclude)

    local used = {}
    for i,_ in ipairs(self.Modify) do
        used[i] = false
    end
    for i,path in ipairs(filteredIncludes) do
        for j,tile in ipairs(self.Modify) do
            if path == tile.Path and not used[j] then
                tiles[i] = tile
                break
            end
        end
        if tiles[i] == nil then
            tiles[i] = Tile(path)
        end
    end

    for _,tile in ipairs(self.Include) do
        tiles[#tiles + 1] = tile
    end

    for _,tile in ipairs(tiles) do
        tile.Path = MakeFullyQualified(tile.Path, self.Tile.Path)
    end

    return tiles
end
