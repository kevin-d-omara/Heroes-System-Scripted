#include !/../lib/30log/class

#include CombatGroup
#include MakeFullyQualified
#include ../IForceModel
#include !/HeroesSystemTacticalScale/GameEngine/Models/Tiles/Tile
#include !/HeroesSystemTacticalScale/GameEngine/Persistence/Database
#include !/Lua/Table/GetLengthOfNonConsecutiveTable
#include !/Lua/String/SplitString

--[[
## Class
class RecruitmentTileForceModel : CombatGroup, IForceModel
{
    -- Public Fields
    Tile Tile                           -- The RecruitmentTile that this ForceModel is based on.
    array<CombatGroup> Options  = nil   -- The Options that are slotted into the RecruitmentTile.
    array<string> Disclude      = nil   -- Tiles to disclude from the "Includes" of this Tile (ex: disclude 'Officer' from 'Rifle_Platoon_8th').
    array<Tile> Include         = nil   -- Tiles to add to the "Includes" of this Tile (ex: 'Recon_Team' or 'HoN.Core_Box.Terrain.Position_1x1').
    array<Tile> Modify          = nil   -- Parameters to alter how the "Includes" of this Tile are placed (ex: flipped, rotated, etc.)
    array<array<Tile>> Extra    = nil   -- Extra Tiles to add to this ForceModel beyond the RecruitmentTile.Includes and the Options.

    -- Public Constructors
    RecruitmentTileForceModel(table data)

    -- Public Methods
    ForceModelDto TransformIntoForceModelDto()  -- Returns a copy of this ForceModel as a ForceModelDto.
}

## Summary
A concrete implementation of a ForceModel that is composed of a single Recruitment Tile with its Options and anything extra.

## Example
-- From Scenario "Out of Gas", Heroes of Normandie, Core Box Scenarios, pg 9
RecruitmentTileForceModel({
    'Rifle_Platoon_22nd',
    options = {
        'Bazooka_Squad_Option',
        'Rifle_Grenades_Option',
        'Willys_50cal_Option',
        {'Mechanized', disclude = {'Halftrack', 'Halftrack'}}   -- They are already deployed to the battlefield.
    },
})
--]]

local RecruitmentTileForceModel = CombatGroup:extend('RecruitmentTileForceModel'):with(IForceModel)

--[[
## Constructor
RecruitmentTileForceModel(table data)
    data:
        <Tile> 1|tile       -- The key can be either [1] or ['tile'].
        array<CombatGroup> options  = nil   -- This array is special, you may include non-consecutive elements (i.e. [1], [2], [4]).
        array<string> disclude      = nil
        array<Tile> include         = nil
        array<Tile> modify          = nil
        array<array<Tile>>|array<Tile> extra = nil
--]]
function RecruitmentTileForceModel:init(data)
    RecruitmentTileForceModel.super.init(self, data)

    data.options    = data.options or {}
    if data.extra ~= nil and (type(data.extra[1]) == 'string' or #data.extra[1] <= 1) then
        data.extra = {data.extra}
    end
    data.extra = data.extra or {}

    self.Options = {}
    for k,v in pairs(data.options) do
        self.Options[k] = CombatGroup(v)    -- Use `pairs` instead of `ipairs` because elements may be non-consecutive (i.e. {[1] = 'a', [3] = 'b'}).
    end
    self.Extra = {}
    for i,row in ipairs(data.extra) do
        self.Extra[i] = {}
        for k,v in ipairs(row) do print(v) end
        for j,element in ipairs(row) do
            self.Extra[i][j] = Tile(element)
        end
    end
end

--[[
## Summary
Transform this RecruitmentTileForceModel into a ForceModelDto.
--]]
function RecruitmentTileForceModel:TransformIntoForceModelDto()
    local tiles = {}

    -- Add a row to the 2d-array, but only if its non-empty.
    local function AppendRow(array)
        if #array > 0 then
            tiles[#tiles + 1] = array
        end
    end

    -- The recruitment tile itself and it's includes.
    tiles[1] = {self.Tile}
    AppendRow(self:GetTransformedIncludes())

    -- The includes for each option.
    -- This complexity is required to preserve the order the tiles are displayed because Options may be in non-consecutive order.
    local len = GetLengthOfNonConsecutiveTable(self.Options)
    for i = 1, len do
        local option = self.Options[i]
        if option ~= nil then
            option.Tile.Path = MakeFullyQualified(option.Tile.Path, self.Tile.Path)
            AppendRow(option:GetTransformedIncludes())
        end
    end

    -- The extras.
    for i,v in ipairs(self.Extra) do
        AppendRow(v, self.Tile.Path)
    end

    local options = {}
    for k,v in pairs(self.Options) do
        options[k] = v.Tile
    end
    local recruitmentTile = Database.GetData(self.Tile.Path)
    local optionSlots = recruitmentTile.OptionSlots

    local dto = ForceModelDto(tiles, options, optionSlots)
    return dto
end
