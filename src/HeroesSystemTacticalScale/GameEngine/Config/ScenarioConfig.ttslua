#include <!/../lib/30log/class>
#include <BattlefieldConfig>
#include <TurnCounterConfig>
#include <PlayerConfig>

--[[
## Class
public class ScenarioConfig
{
    -- Public Fields
    BattlefieldConfig Battlefield
    TurnCounterConfig TurnCounter
    dictionary<PlayerConfig> Players
    TeamsConfig Teams

    -- Constructors
    public ScenarioConfig(data)
}

## Summary
Container for all physical components of a Scenario.
--]]

ScenarioConfig = class('ScenarioConfig')

--[[
## Parameters
<table> data: A table with the following key-value pairs:
    <table> Battlefield: See constructor for BattlefieldConfig.
    <table> TurnCounter: See constructor for TurnCounterConfig.
    <table<table>> Players: See constructor for PlayerConfig.
    <table> Teams: See constructor for TeamsConfig.
--]]
function ScenarioConfig:init(data)
    if type(data) ~= 'table' then error("Argument [1] data: table expected, but got " .. type(data) .. ".") end
    if type(data.Battlefield) ~= 'table' then
        error("Argument [1] parameters.Battlefield: table expected, but got " .. type(data.Battlefield) .. ".")
    end
    if type(data.TurnCounter) ~= 'table' then
        error("Argument [2] parameters.TurnCounter: table expected, but got " .. type(data.TurnCounter) .. ".")
    end
    if type(data.Players) ~= 'table' then
        error("Argument [3] parameters.Players: table expected, but got " .. type(data.Players) .. ".")
    end

    self.Battlefield = BattlefieldConfig(data.Battlefield)
    self.TurnCounter = TurnCounterConfig(data.TurnCounter)
    self.Players = {}
    for k,v in pairs(data.Players) do
        self.Players[k] = PlayerConfig(v)
    end

    return self
end
