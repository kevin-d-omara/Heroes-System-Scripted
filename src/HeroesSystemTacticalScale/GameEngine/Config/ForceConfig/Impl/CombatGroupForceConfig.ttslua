#include <!/../lib/30log/class>

#include <CombatGroup>
#include <../IForceConfig>
#include <!/HeroesSystemTacticalScale/GameEngine/Config/Tiles/Tile>

--[[
## Class
class CombatGroupForceConfig : IForceConfig
{
    -- Public Fields
    array<CombatGroup> CombatGroups     -- The CombatGroups that make up this ForceConfig.
    array<array<Tile>> Extra = nil      -- Extra Tiles to add to this ForceConfig beyond the CombatGroups.

    -- Public Constructors
    CombatGroupForceConfig(array<CombatGroup> data)
    CombatGroupForceConfig(table data)

    -- Public Methods
    ForceConfigDto TransformIntoForceConfigDto()  -- Returns a copy of this ForceConfig as a ForceConfigDto.
}

## Summary
A concrete implementation of a ForceConfig that is composed of smaller Combat Groups instead of a large Recruitment Tile.

## Example
-- From Scenario "Pathfinders", Heroes of Normandie, Sainte-Mere Eglise Campaign Book, pg 6.
local units = CombatGroupForceConfig({
    tiles = {
        'Pathfinders_Squad_Option',
        'Engineers_Squad_Option',
        {'Signallers_Option', include = {'Item_Eureka_Ground_Radar'}},
    },
    extra = {
        'Item_Halifane_Light',
        'Item_Halifane_Light',
        'Item_Halifane_Light',
    },
})
local gears = CombatGroupForceConfig({
    'Camo_Option',
    'Grenades_Option',
    'Hawkins_Mines_Option',
})
--]]

CombatGroupForceConfig = class('CombatGroupForceConfig'):with(IForceConfig)

--[[
## Constructor
CombatGroupForceConfig(array<CombatGroup> data)
CombatGroupForceConfig(table data)
    data:
        array<CombatGroup> tiles
        array<array<Tile>>|array<Tile> extra = nil
--]]
function CombatGroupForceConfig:init(data)
    if data.tiles == nil then
        data.tiles = data
    end
    if data.extra ~= nil and (type(data.extra[1]) == 'string' or #data.extra[1] <= 1) then
        data.extra = {data.extra}
    end
    data.extra = data.extra or {}

    self.CombatGroups = {}
    for i,v in ipairs(data.tiles) do
        self.CombatGroups[i] = CombatGroup(v)
    end
    self.Extra = {}
    for i,row in ipairs(data.extra) do
        self.Extra[i] = {}
        for j,element in ipairs(row) do
            self.Extra[i][j] = Tile(element)
        end
    end
end

--[[
## Summary
Transform this CombatGroupForceConfig into a ForceConfigDto.
--]]
function CombatGroupForceConfig:TransformIntoForceConfigDto()
    local tiles = {}

    -- Add a row to the 2d-array, but only if its non-empty.
    local function AppendRow(array)
        if #array > 0 then
            tiles[#tiles + 1] = array
        end
    end

    -- The combat group tiles themselves.
    local header = {}
    for i,v in ipairs(self.CombatGroups) do
        header[i] = v.Tile
    end
    AppendRow(header)

    -- The includes for each combat group.
    for _,group in ipairs(self.CombatGroups) do
        local includes = group:GetTransformedIncludes()
        AppendRow(includes)
    end

    -- The extras.
    for i,v in ipairs(self.Extra) do
        AppendRow(v)
    end

    return ForceConfigDto(tiles)
end
