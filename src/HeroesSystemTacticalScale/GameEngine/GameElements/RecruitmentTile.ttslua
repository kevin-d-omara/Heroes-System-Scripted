#include !/TabletopSimulator/NestedObjects/TTSObject
#include !/Lua/Table/FoldIn

--[[
## Class
public class RecruitmentTile : TTSObject
{
    -- Fields
    public array<string> Includes
    public array<Option> Options
    public array<Vector2> OptionSlots

    -- Constructors
    public RecruitmentTile.new(parameters)
    public RecruitmentTile(parameters)

    -- Methods

}

## Summary
A Heroes System recruitment tile. For example, 'Rifle Platoon 4th Inf. Div. 8th Inf. Reg' from the Core Box.
--]]

local RecruitmentTile = TTSObject()

--[[
## Summary
Return a new RecruitmentTile instance with the specified GUID and parameters.

## Parameters
<table> parameters:
    <string> guid: The GUID of the Tabletop Simulator Object that this RecruitmentTile represents.
    <array<string>> Includes: The names of the TTSObjects that are included with this recruitment tile (for example, in the Core Box, 'Rifle Platoon 8th' includes {'Officer', 'Recon_Team', 'Fire_Team', 'Support_Team'}. Each name must match a TTSObject that shares a parent with this Option.
    <table<Option>> Options: The Option tiles that are unique to this recruitment tile.
    <array<Vector2>> OptionSlots: The vector 2 offsets for each recruitment slot on the physical recruitment tile, moving left to right.
    <table<string>> Guids: The GUID of all objects that belong to this recruitment tile, except for the guids of the Options and of the recruitment tile itself.
--]]
function RecruitmentTile:new(parameters)
    -- Validate inputs.
    if parameters == nil then error('ERROR: Parameter 1, `parameters`, is missing.') end
    if parameters.guid == nil then error('ERROR: Parameter 1, `parameters`, is missing the key `guid`.') end

    local obj = {}
    setmetatable(obj, self)
    self.__index = self
    self.__call = function(self, ...) return self:new(...) end

    obj.guid        = parameters.guid
    obj.Includes    = parameters.Includes or {}
    obj.Options     = parameters.Options or {}
    obj.OptionSlots = parameters.OptionSlots or {}
    obj.Guids       = parameters.Guids or {}

    -- Transform GUIDs into TTSObjects.
    for k,v in pairs(obj.Guids) do
        obj.Guids[k] = TTSObject(v)
    end

    -- Assign this recruitment tile as the parent of each Option.
    for k,v in pairs(obj.Options) do
        v:SetParent(obj)
    end

    -- Make the Options and Guids accessible directly on this object.
    -- i.e. myRecruitmentTile.Ambush_Squad_Option == myRecruitmentTile.Options.Ambush_Squad_Option
    -- i.e. myRecruitmentTile.Bazooka == myRecruitmentTile.Guids.Bazooka
    FoldIn(obj.Options, obj)
    FoldIn(obj.Guids, obj)

    return obj
end

--[[
## Summary
Copy the Options and GUIDs onto the bag this recruitment tile is inside of.

This enables these tiles to be referenced directly from the bag this recruitment tile is in.

## Example
Before:
    HoN.CoreBox.US.RiflePlatoon8th.RecruitmentTile.Bazooka
    HoN.CoreBox.US.RiflePlatoon8th.RecruitmentTile.Ambush_Squad_Option
After
    HoN.CoreBox.US.RiflePlatoon8th.Bazooka
    HoN.CoreBox.US.RiflePlatoon8th.Ambush_Squad_Option

--]]
function RecruitmentTile:FoldUp()
    FoldIn(self.Options, self.parentContainer)
    FoldIn(self.Guids, self.parentContainer)

    for k,v in pairs(self.Options) do
        v:SetParent(self.parentContainer)
    end
    for k,v in pairs(self.Guids) do
        v:SetParent(self.parentContainer)
    end
end
