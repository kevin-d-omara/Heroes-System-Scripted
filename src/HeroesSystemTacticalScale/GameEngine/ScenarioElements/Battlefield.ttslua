--[[
## Class
public class Battlefield
{
    -- Fields
    public int Width
    public int Height
    public array Terrain
    public array Elements

    -- Constructors
    public Battlefield:new(parameters)
    public Battlefield(parameters)

    -- Methods

}

## Summary
A representation of a Heroes System battlefield, including both terrain tiles and the elements that go on top (i.e. houses, objectives, units, etc.).
--]]

local Battlefield = {}

-- Can create a new Battlefield instance by calling either Battlefield:new() or just Battlefield().
setmetatable(Battlefield, { __call = function(self, ...) return self:new(...) end })

--[[
## Parameters
    Width
    Height
    [IndexType = "tile" | "cell"]
    Terrain {
        {path, [{index, alias, rotation, isFlipped}]}   -- index: {x,y} on the grid where the top-left cell of the tile should be placed after it has been rotated.
    }
    Elements {
        {path, tile, index, indexType, [{rotation, isFlipped}]}
    }
--]]
function Battlefield:new(parameters)
    local errorMsg = Battlefield._ValidateParameters(parameters)
    if errorMsg ~= nil then
        error(errorMsg)
    end

    if Battlefield._TerrainIndexIsMissing(parameters.Terrain) then
        -- Add the Vector2 "index" key-value to each Terrain tile.
        -- The indices move left-to-right, top-to-bottom in a grid of size Width x Height.
        local width = parameters.Width
        local height = parameters.Height
        for row = 1, height do
            for col = 1, width do
                local index = width * (row - 1) + col
                local tile = parameters.Terrain[index]
                if type(tile[2]) ~= "table" then
                    tile[2] = {}
                end
                -- The index is the upper-left cell of the terrain tile.
                tile[2].index = {1+7*(row-1), 1+7*(col-1)}  -- TODO: use actual Vector2 class.
            end
        end
    end

    if parameters.IndexType == nil or parameters.IndexType == "tile" then
        -- Convert from terrain tiles (7x7 cells) to individual cells.
        parameters.Width  = parameters.Width  * 7
        parameters.Height = parameters.Height * 7
    end

    local obj = {}
    setmetatable(obj, self)
    self.__index = self
    self.__call = function(self, ...) return self:new(...) end

    obj.Width  = parameters.Width
    obj.Height = parameters.Height
    obj.Terrain = parameters.Terrain
    obj.Elements = parameters.Elements

    return obj
end


function Battlefield._ValidateParameters(parameters)
    if type(parameters) ~= 'table'          then return "Argument [1] parameters: table expected, but got " .. tostring(type(parameters)) .. "." end
    if type(parameters.Width) ~= 'number'   then return "Argument [1] parameters.Width: integer number expected, but got " .. tostring(type(parameters.Width)) .. "." end
    if type(parameters.Height) ~= 'number'  then return "Argument [1] parameters.Height: integer number expected, but got " .. tostring(type(parameters.Height)) .. "." end
    if type(parameters.Terrain) ~= 'table'  then return "Argument [1] parameters.Terrain: table expected, but got " .. tostring(type(parameters.Terrain)) .. "." end
    if #parameters.Terrain < 1              then return "Argument [1] parameters.Terrain: array expected, but 0 elements found." end
    if parameters.IndexType ~= nil and (parameters.IndexType ~= "tile" or parameters.IndexType ~= "cell")
                                            then return "Argument [1] parameters.IndexType: the string 'tile' or 'cell' expected, but got " .. tostring(parameters.IndexType) .. "." end
    if parameters.IndexType == "cell" and (parameters.Terrain[1][2] == nil or parameters.Terrain[1][2].index == nil)
                                            then return "Terrain elements must contain an index (i.e. Terrain[1][2].index must be a Vector2.)" end

    return nil
end

--[[
Returns true if the first terrain tile does not include an "indexType" key.
ex: tile = {"SoN.Core_Box.Terrain.S3_B", {index = {1, 1}, rotation = -90}}
--]]
function Battlefield._TerrainIndexIsMissing(terrainTiles)
    local tile = terrainTiles[1]    -- {"SoN.Core_Box.Terrain.S3_B", {index = {1, 1}, rotation = -90}}
    local params = tile[2]          -- {index = {1, 1}, rotation = -90}
    if params == nil or params.index == nil then
        return true
    else
        return false
    end
end
