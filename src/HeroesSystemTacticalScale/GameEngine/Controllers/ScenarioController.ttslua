#include <!/HeroesSystemTacticalScale/GameEngine/Models/ScenarioModel>
#include <!/HeroesSystemTacticalScale/GameEngine/Views/BattlefieldView>
#include <!/HeroesSystemTacticalScale/GameEngine/Views/TurnCounterView>

--[[
## Class
public class ScenarioController
{
    -- Fields
    private ScenarioModel Model

    -- Constructors
    public ScenarioController:new(data)
    public ScenarioController(data)

    -- Methods
    void PhysicallySetupScenario()
}

## Summary
Controller class for a single scenario. Offers public API methods to interact with the scenario.
--]]

ScenarioController = {
    BUFFER_BETWEEN_TURN_COUNTER_AND_BATTLEFIELD = 3,
}

-- Can create a new ScenarioController instance by calling either ScenarioController:new() or just ScenarioController().
setmetatable(ScenarioController, { __call = function(self, ...) return self:new(...) end })

--[[
## Parameters
<table> model: See constructor for ScenarioModel.
--]]
function ScenarioController:new(model)
    local obj = {}
    setmetatable(obj, self)
    self.__index = self
    self.__call = function(self, ...) return self:new(...) end

    obj.Model = ScenarioModel(model)
    obj.View = {}

    return obj
end

function ScenarioController:PhysicallySetupScenario()
    self.View.Battlefield = BattlefieldView(self.Model.Battlefield)
    self.View.Battlefield:Materialize({
        callback = || self:_PlaceTurnCounter()
    })
end

function ScenarioController:_PlaceTurnCounter()
    self.View.TurnCounter = TurnCounterView(self.Model.TurnCounter)

    local size = self.View.Battlefield:GetSize()
    local buffer = self.BUFFER_BETWEEN_TURN_COUNTER_AND_BATTLEFIELD
    local x = (size.x / 2) + buffer
    local position = Vector3.right * x

    self.View.TurnCounter:Materialize({
        position = position,
        callback = || print('placed')
    })
end
