#include <!/../lib/30log/class>
#include <!/HeroesSystemTacticalScale/GameEngine/Config/ScenarioConfig>
#include <!/HeroesSystemTacticalScale/GameEngine/Views/ScenarioView>
#include <!/HeroesSystemTacticalScale/GameEngine/Views/BattlefieldView>
#include <!/HeroesSystemTacticalScale/GameEngine/Views/TurnCounterView>
#include <!/HeroesSystemTacticalScale/GameEngine/Persistence/Database>
#include <!/TabletopSimulator/Vector2>


--[[
## Class
public class ScenarioController
{
    -- Fields
    private ScenarioConfig Config
    private ScenarioView View

    -- Constructors
    public ScenarioController(config)

    -- Methods
    void PhysicallySetupScenario()
}

## Summary
Controller class for a single instance of a scenario.

Is responsible for creating and controlling the scenario view.
Is responsible for calling the data access layer to get data needed for the view.
--]]

ScenarioController = class('ScenarioController')

--[[
## Parameters
<table> config: The scenario's config file. See 'HeroesSystemTacticalScale/GameEngine/Config/ScenarioConfig:init()'.
--]]
function ScenarioController:init(config)
    self.Config = ScenarioConfig(config)
    self.View = self:_CreateScenarioView(self.Config)
end

function ScenarioController:PhysicallySetupScenario()
    self.View:Materialize()
end

function ScenarioController:_CreateScenarioView(scenarioConfig)
    return ScenarioView(
        self:_CreateBattlefieldView(scenarioConfig.Battlefield),
        self:_CreateTurnCounterView(scenarioConfig.TurnCounter)
    )
end

function ScenarioController:_CreateBattlefieldView(battlefieldConfig)
    return BattlefieldView(battlefieldConfig)
end

function ScenarioController:_CreateTurnCounterView(turnCounterConfig)
    local coord = Database.GetData(turnCounterConfig.TurnCounterTile.Path)

    return TurnCounterView(turnCounterConfig, coord)
end
