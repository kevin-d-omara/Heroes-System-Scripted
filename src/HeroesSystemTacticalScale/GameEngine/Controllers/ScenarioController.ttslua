#include <!/../lib/30log/class>
#include <!/HeroesSystemTacticalScale/GameEngine/Models/ScenarioModel>
#include <!/HeroesSystemTacticalScale/GameEngine/Views/BattlefieldView>
#include <!/HeroesSystemTacticalScale/GameEngine/Views/TurnCounterView>

--[[
## Class
public class ScenarioController
{
    -- Fields
    private ScenarioModel Model

    -- Constructors
    public ScenarioController(data)

    -- Methods
    void PhysicallySetupScenario()
}

## Summary
Controller class for a single scenario. Offers public API methods to interact with the scenario.
--]]

ScenarioController = class('ScenarioController')
ScenarioController.BUFFER_BETWEEN_TURN_COUNTER_AND_BATTLEFIELD = 3

--[[
## Parameters
<table> model: See constructor for ScenarioModel.
--]]
function ScenarioController:init(model)
    self.Model = ScenarioModel(model)
    self.View = {}

    return self
end

function ScenarioController:PhysicallySetupScenario()
    self.View.Battlefield = BattlefieldView(self.Model.Battlefield)
    self.View.Battlefield:Materialize(|| self:_PlaceTurnCounter())
end

function ScenarioController:_PlaceTurnCounter()
    self.View.TurnCounter = TurnCounterView(self.Model.TurnCounter)

    local size = self.View.Battlefield:GetSize()
    local buffer = self.BUFFER_BETWEEN_TURN_COUNTER_AND_BATTLEFIELD
    local x = (size.x / 2) + buffer
    local position = Vector3.right * x

    self.View.TurnCounter:Materialize(position, || print('placed'))
end
