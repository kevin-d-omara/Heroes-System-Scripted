#include <!/TabletopSimulator/Vector2>

--[[
## Class
public class TurnCounterCoordinates
{
    -- Public Fields
    Vector2 InitiativeMarkerOrigin  -- The (x,y) offset from the center of this tile to the center of the first initiatve marker space.
    Vector2 EventMarkerOrigin       -- The (x,y) offset from the center of this tile to the center of the first event marker space.
    float MarkerSpacingVertical     -- The distance between successive marker spaces (for both initiatve markers and event markers).

    -- Constructor
    public TurnCounterCoordinates(data)

    -- Public Methods
    Vector2 GetOffsetForInitiativeMarker(index) -- Get the (x,y) offset between the center of this tile and the n'th initiatve marker space.
    Vector2 GetOffsetForEventMarker(index)      -- Get the (x,y) offset between the center of this tile and the n'th event marker space.
}

## Summary
Collection of magic numbers that describe where markers should be placed on a TurnCounter Object.
--]]

TurnCounterCoordinates = {}
setmetatable(TurnCounterCoordinates, { __call = function(self, ...) return self:init(...) end })

--[[
## Parameters
    <Vector2> InitiativeMarkerOrigin
    <Vector2> EventMarkerOrigin
    float MarkerSpacingVertical
--]]
function TurnCounterCoordinates:init(data)
    assert(type(data) == 'table', "Argument [1] data: table expected, but got " .. type(data) .. ".")
    assert(type(data.InitiativeMarkerOrigin) == 'table', "Argument [1] data.InitiativeMarkerOrigin: table expected, but got " .. type(data.InitiativeMarkerOrigin) .. ".")
    assert(type(data.EventMarkerOrigin)      == 'table', "Argument [1] data.EventMarkerOrigin: table expected, but got " .. type(data.EventMarkerOrigin) .. ".")
    assert(type(data.MarkerSpacingVertical)  == 'number', "Argument [1] data.MarkerSpacingVertical: number expected, but got " .. type(data.MarkerSpacingVertical) .. ".")

    local obj = {
        InitiativeMarkerOrigin  = Vector2(data.InitiativeMarkerOrigin),
        EventMarkerOrigin       = Vector2(data.EventMarkerOrigin),
        MarkerSpacingVertical   = data.MarkerSpacingVertical,
    }

    setmetatable(obj, self)
    self.__index = self

    return obj
end

-- Get the (x,y) offset between the center of this tile and the n'th initiatve marker space.
function TurnCounterCoordinates:GetOffsetForInitiativeMarker(index)
    if type(index) ~= 'number' then error("Argument [1] index: number expected, but got " .. tostring(type(index)) .. ".") end
    return self.EventMarkerOrigin + Vector2.up * self.MarkerSpacingVertical * (index - 1)
end

-- Get the (x,y) offset between the center of this tile and the n'th event marker space.
function TurnCounterCoordinates:GetOffsetForEventMarker(index)
    if type(index) ~= 'number' then error("Argument [1] index: number expected, but got " .. tostring(type(index)) .. ".") end
    return self.InitiativeMarkerOrigin + Vector2.up * self.MarkerSpacingVertical * (index - 1)
end
