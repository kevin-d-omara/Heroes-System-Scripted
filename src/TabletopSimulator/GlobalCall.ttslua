--[[
WARNING: This script must be included on the Global.ttslua script in order to work.
Include with the following syntax: `#include <!/TabletopSimulator/GlobalCall>`
See: https://github.com/Berserk-Games/atom-tabletopsimulator-lua/wiki/%23include
--]]

--[[
## Overview
Call a method on the Global script, even ones nested inside of a table.

## Parameters
<string> functionPath
    The period-delimited path to the function on the Global script (ex: "SetupGame" or "GameManager.SpawnEnemy").
    The first key in the path must be a global variable (i.e. cannot be declared as `local`).
<varargs> ...
    Any number of arguments of any type, including nil.
    Should match the signature of the function referred too by 'functionPath'.
    For example: `{numPlayers = 2}` or `'zombie', 'zombie', 'bandit'`

## Return
The return value of the function executed on the Global script.
--]]
function GlobalCall(functionPath, ...)
    local result = Global.call('__GlobalCallHandler__', {
        functionPath        = functionPath,
        functionParameters  = table.pack(...),
    })
    return result
end

--[[
## Overview
A handler for calls to 'GlobalCall'. It re-routes the varargs ('...') to the appropriate function.
--]]
function __GlobalCallHandler__(kwargs)
    local functionPath          = kwargs.functionPath
    local functionParameters    = kwargs.functionParameters

    local func = GetElementFromNestedTables(functionPath)
    return func(table.unpack(functionParameters))
end



--------------------------------------------------------------------------------
-- [[Helper Methods ]] ---------------------------------------------------------
--------------------------------------------------------------------------------

--[[
## Summary
Return an element nested inside a set of tables by the absolute path to the element by name (i.e. "Animals.Dogs.Fido").

## Parameters
<string> stringPath: A delimited string that specifies a list of tables leading to the element to be returned. The first element must be a globally accessible variable.
<string> delimiter: The delimiter used to separate tables.
    [Optional, defaults to '.']

## Throws
Error if the first element is either nil or local.
--]]
local function GetElementFromNestedTables(stringPath, delimiter)
    local delimiter = delimiter or '.'
    local pathArray = SplitString(stringPath, delimiter)

    -- Get the table matching the first element.
    local root = _ENV[pathArray[1]]
    if root == nil then
        error("Variable '" .. tostring(pathArray[1]) .. "' cannot be accessed because it is either nil or local. Make sure it is not declared with local and that you have spelled it correctly.")
    end

    -- Get the final element from the nested tables.
    for i = 2, #pathArray do
        root = root[pathArray[i]]
    end

    return root
end

--[[
## Summary
Split a string into an array of strings by separating the string into substrings,
using a specified separator string to determine where to make each split.

## Source
https://stackoverflow.com/a/7615129
--]]
local function SplitString(inputstr, sep)
    if sep == nil then
            sep = "%s"
    end
    local t={}
    local i=1
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
            t[i] = str
            i = i + 1
    end
    return t
end
