#include Util/Invoke
#include Util/Callbacks
#include Util/TaskScheduler
#include Util/DeepCopy

-- Store everything in tables to de-clutter the user's namespace.
_Delver = {  -- Shorter name for this library.
    Local   = {},   -- Holds methods that run on the local Object.
    Global  = {},   -- Holds methods that run on Global.
}

--[[ Local ]]-------------------------------------------------------------------
--[[
## Summary
Take an object from inside a set of nested bags and place it in the world.

Tabletop Simulator provides the 'takeObject()' method to pull an object out of a container (such as a bag or deck). However, there is no easy way to pull an object out of a bag that is inside of another bag. This method accomplishes that.

## Parameters
<table> guidArray: An array of GUIDs beginning with the first container and ending with the object to take.
    The first GUID is for a container that can be returned with the global function (https://api.tabletopsimulator.com/base/#getobjectfromguid).
    Each subsequent GUID is for an object that would be returned from calling (https://api.tabletopsimulator.com/object/#takeobject) on the object returned from the previous GUID in the list.
<table> parameters: The same parameters as https://api.tabletopsimulator.com/object/#takeobject, plus:
    <bool> asCopy: If true, leave a copy of the final object in the container. The copy will have the same GUID as was used to get it, but the returned object will have a new GUID.
        [Optional, defaults to true.]
--]]
function GetNestedObjectFromGuids(guidArray, parameters)
    local isValid, errorString = _Delver.Local.IsArrayOfStrings(guidArray)
    if not isValid then
        error(errorString)
    end

    if type(guidArray) ~= 'table' then error("Argument [1] guidArray: table expected but got " .. tostring(type(guidArray)) .. ".") end -- This also checks for nil.
    if #guidArray < 1 then error("Argument [1] guidArray: array of strings expected, but got an empty table.") end
    if not _Delver.Local.IsArrayOfStrings(guidArray) then error("Argument [1] guidArray: array of strings expected but got array of " .. tostring(type(guidArray[1])) .. ".") end

    -- Save the user's callback for when Global is finished taking the object.
    local function OnSuccess(args)
        if parameters.callback_function ~= nil then
            local takenObj = getObjectFromGUID(args.takenObjGuid)
            parameters.callback_function(takenObj)
        end
    end
    local requestId = Callbacks.AddRequest(OnSuccess)

    -- Prepare the parameters to be serialized and sent to Global.
    local globalParams = DeepCopy(parameters)   -- Copy all the parameters.
    globalParams._guidArray = guidArray         -- Add the guid array.
    globalParams.callback_function = nil        -- Remove the callback because functions cannot be serialized.
    globalParams._callerGuid = self.getGUID()   -- Add our GUID so Global can call us back.
    globalParams._requestId = requestId         -- Record which request this is so we can use the correct callback when Global calls us back.
    Invoke(Global, '_Delver.Global.GetNestedObjectFromGuids', globalParams)
end

function _Delver.Local.IsArrayOfStrings(guidArray)
    if type(guidArray) ~= 'table' then
        return false, "Argument [1] guidArray: table expected but got " .. tostring(type(guidArray)) .. "."
    end

    if #guidArray < 1 then
        return false, "Argument [1] guidArray: array of strings expected, but got an empty table."
    end

    for i,v in ipairs(guidArray) do
        if type(v) ~= 'string' then
            return false, "Argument [1] guidArray: array of strings expected but got array of " .. tostring(type(guidArray[i])) .. "."
        end
    end

    return true
end

--[[ Global ]]------------------------------------------------------------------
function _Delver.Global.GetNestedObjectFromGuids(parameters)
    -- Set default values for parameters.
    local parameters = parameters or {}
    parameters.position = parameters.position or {0,0,0}
    if type(parameters.asCopy) ~= 'boolean' then parameters.asCopy = true end
    -- to be continued ...

    -- Unpack the extra parameters.
    local guidArray = parameters._guidArray

    local function NotifyCallerOfSuccess(takenObject)
        local args = {
            _requestId = parameters._requestId,
            takenObjGuid = takenObject.getGUID(),
        }
        Invoke(parameters._callerGuid, 'Callbacks.OnSuccess', args)
    end

    -- Callback function that places the object somewhere.
    local function PlaceTheObject(takenObject)
        if (parameters.flip == true) then
            -- Flip the object using rotation because "takenObject.flip()" glitches when combined with setRotationSmooth().
            parameters.rotation[3] = parameters.rotation[3] + 180
        end
        if (parameters.smooth == true) then
            takenObject.setPositionSmooth(parameters.position, false, false)
            takenObject.setRotationSmooth(parameters.rotation, false, false)
        else
            takenObject.setPosition(parameters.position)
            takenObject.setRotation(parameters.rotation)
        end

        -- Wait 2 frames so the object is fully materialized.
        -- In this frame, the object has the same guid as its clone and sometimes has a {0,0,0} bounding box.
        Wait.frames(function() NotifyCallerOfSuccess(takenObject) end, 2)
    end

    local rootContainer = getObjectFromGUID(guidArray[1])
    local nextIndex = 2

    TaskScheduler.AddTask(
        function() _Delver.Global.TakeObjectFromNestedBags(rootContainer, guidArray, nextIndex, PlaceTheObject) end
    )
end

--[[
Samples:
    CoreBox.Terrain.TileC02
    CoreBox.US.RiflePlatoon12th.ReconTeam
    Steiner.FireGroup
--]]

--[[
## Summary
Do not call this directly. Use `GetNestedObjectFromGUIDs(guidArray, parameters)` instead.

## Parameters
currentObject: The most recent object to be instantiated from the chain of nested containers.
guidArray: The array of GUIDs leading to the final object to take.
nextIndex: The index into `guidArray` of the next object to take in the chain.
parentObject: The container that `currentObject` was inside of.
endingCallback: A function to call after the final object has been taken.
--]]
function _Delver.Global.TakeObjectFromNestedBags(currentObject, guidArray, nextIndex, endingCallback, parentObject)
    local function PutMeBack(finalTakenObject)
        if parentObject ~= nil then
            currentObject.setLock(false)
            _Delver.Global.ReturnObjectToContainer(currentObject, parentObject)
        end
        if endingCallback ~= nil then
            endingCallback(finalTakenObject)
        end
    end

    if nextIndex > #guidArray then
        -- This is the object we have been looking for.
        -- Clone it and return the clone to the parent container.
        currentObject.setLock(false)
        clone = currentObject.clone()
        _Delver.Global.ReturnObjectToContainer(clone, parentObject)
        if endingCallback ~= nil then
            endingCallback(currentObject)
        end
    else
        -- Go deeper.
        guid = guidArray[nextIndex]
        childObject = currentObject.takeObject({
            guid = guid
            , position = HiddenPosition
            , smooth = false
            , callback_function = function(takenObject)
                _Delver.Global.TakeObjectFromNestedBags(takenObject, guidArray, nextIndex + 1, PutMeBack, currentObject)
            end
        })

        -- Stop the taken object from moving while we continue to dig deeper.
        childObject.setLock(true)
    end
end

-- Place the object into the container, as close to instantly as posible.
function _Delver.Global.ReturnObjectToContainer(object, container)
    object.setPosition(container.getPosition())
    container.putObject(object)
end
